#
# CMake file for compiled profilers with parallelism enabled
#

cmake_minimum_required(VERSION 3.3 FATAL_ERROR)

project(profiler)

set(CMAKE_CXX_STANDARD 14)

set(PACKAGE_ROOT @EXTERNAL_DIR@)
include(./OpenBLASSetup.cmake)

if(MSVC)
  # Set Visual Studio-specific options
  add_definitions(-DUNICODE)
  add_compile_options(/MP)
  add_compile_options(/bigobj)
  add_compile_options(/W4)
  add_compile_options(-D_SCL_SECURE_NO_WARNINGS)
  add_compile_options(-D_CRT_SECURE_NO_DEPRECATE)
  set(CMAKE_EXE_LINKER_FLAGS "${CMAKE_EXE_LINKER_FLAGS} /LARGEADDRESSAWARE:NO")
endif()

set(CMAKE_POSITION_INDEPENDENT_CODE ON)

#
# Compiled profiler that spits out per-node profiling information
#

set (src 
  CompiledProfile_main.cpp
  ProfileReport.cpp
  )

set (include
  ProfileReport.h
  )

source_group("src" FILES ${src})
source_group("include" FILES ${include})
source_group("tcc" FILES ${tcc})

set(THREADS_PREFER_PTHREAD_FLAG ON)
set(CMAKE_THREAD_PREFER_PTHREAD ON)
find_package(Threads REQUIRED)

# Version using ELL's native object file output
add_executable(profile ${src} ${include} ${tcc})
target_link_libraries(profile ${CMAKE_CURRENT_SOURCE_DIR}/compiled_model.o ${BLAS_LIBS})
target_compile_definitions(profile PUBLIC COMPILED_ELL_PROFILER)

# Version with LLVM's opt tool optimizing ELL's IR output and then compiling with llc
add_executable(profile_opt ${src} ${include} ${tcc})
target_link_libraries(profile_opt ${CMAKE_CURRENT_SOURCE_DIR}/compiled_model_opt.o ${BLAS_LIBS})
target_compile_definitions(profile_opt PUBLIC COMPILED_ELL_PROFILER)


#
# Simple program that just exercises the model and exits. Used with low-level system profiling and timing tools 
#

set (src 
  CompiledExerciseModel_main.cpp
  )

set (include
  )

source_group("src" FILES ${src})
source_group("include" FILES ${include})
source_group("tcc" FILES ${tcc})

# Version using ELL's native object file output
add_executable(exercise_model ${src} ${include} ${tcc})
target_link_libraries(exercise_model ${CMAKE_CURRENT_SOURCE_DIR}/compiled_model.o ${BLAS_LIBS})

# Version with LLVM's opt tool optimizing ELL's IR output and then compiling with llc
add_executable(exercise_model_opt ${src} ${include} ${tcc})
target_link_libraries(exercise_model_opt ${CMAKE_CURRENT_SOURCE_DIR}/compiled_model_opt.o ${BLAS_LIBS})
