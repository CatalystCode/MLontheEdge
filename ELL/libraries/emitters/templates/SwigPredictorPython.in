u8R"(class Model:
    """Base class that user code derives from to provide callbacks"""
    def __init__(self):
        
        self.predictor = @@PREDICTOR_CLASS@@()

        # keep these wrapper objects alive so the @@PREDICTOR_CLASS@@ C++ code can keep a pointer to them.
        self.input_wrapper = InputCallableWrapper(self._@@SOURCE_CALLBACK@@)
        self.output_wrapper = OutputCallableWrapper(self.@@SINK_CALLBACK@@)
        self.lag_wrapper = LagCallableWrapper(self.@@LAG_CALLBACK@@)

        self.predictor.Register(self.input_wrapper,
          get_default_input_shape().Size(),
          self.output_wrapper,
          get_default_output_shape().Size(),
          self.lag_wrapper)

        self.input = @@SOURCE_VECTOR_TYPE@@(get_default_input_shape().Size())
        self.result = @@SINK_VECTOR_TYPE@@(get_default_output_shape().Size())

    def _@@SOURCE_CALLBACK@@(self, data: '@@SOURCE_VECTOR_TYPE@@') -> "bool":
        import numpy as np
        data.copy_from(self.@@SOURCE_CALLBACK@@().astype(np.@@SOURCE_NUMPY_TYPE@@).ravel())
        return True

    def @@SOURCE_CALLBACK@@(self) -> "numpy.ndarray":
        """Derived classes override this to return data as a Numpy array"""
        return None

    def @@SINK_CALLBACK@@(self, output: '@@SINK_VECTOR_TYPE@@'):
        """Derived classes override this to receive data as a @@SINK_VECTOR_TYPE@@"""
        pass

    def @@LAG_CALLBACK@@(self, lag):
        """Derived classes override this"""
        pass

    def get_step_interval(self) -> "double":
        """Returns the step interval in milliseconds"""
        return @@MODULE@@_GetStepInterval()

    def get_lag_threshold(self) -> "double":
        """Returns the lag threshold in milliseconds"""
        return @@MODULE@@_GetLagThreshold()

    def time_to_next_interval(self, current_time=0) -> "double":
        """Returns the time to next interval in milliseconds"""
        return @@MODULE@@_GetTicksUntilNextInterval(current_time)

    def @@PREDICT_FUNCTION_PY@@(self, current_time=0):
        """Runs @@PREDICT_FUNCTION_PY@@ with the current time in milliseconds"""
        @@PREDICT_FUNCTION@@(self.predictor, current_time, self.result)


def predict(inputData: 'numpy.ndarray') -> "numpy.ndarray":
    """Convenience function for calling the model directly without callbacks"""

    class PredictWrapper(Model):
        "Internal class that feeds inputData and receives the result"
        
        def __init__(self, inputData):
            Model.__init__(self)
            self.input = inputData
            self.results = None

        def @@SOURCE_CALLBACK@@(self) -> "numpy.ndarray":
            "Callback when input is needed"
            return self.input

        def @@SINK_CALLBACK@@(self, output: '@@SINK_VECTOR_TYPE@@'):
            "Callback when output is available"
            import numpy as np
            self.results = np.asarray(output)

        def get_results(self) -> "numpy.ndarray":
            "Returns the cached results"
            return self.results

    wrapper = PredictWrapper(inputData)
    wrapper.@@PREDICT_FUNCTION_PY@@()
    return wrapper.get_results()

def reset():
    @@RESET_FUNCTION@@()

)"